plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'bts'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

//	implementation 'io.springfox:springfox-boot-starter:3.0.0'
//	implementation 'io.springfox:springfox-oas:3.0.0'
//	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

//	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
//	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
//	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

//	implementation 'org.springframework.boot:spring-boot-starter-security'
}

tasks.named('test') {
	useJUnitPlatform()
}


// bts > users > config > JwtService

//package bts.users.config;
//
//import io.jsonwebtoken.Claims;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
//import io.jsonwebtoken.io.Decoders;
//import io.jsonwebtoken.security.Keys;
//import java.security.Key;
//import java.util.Date;
//import java.util.function.Function;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.stereotype.Service;
//
//@Service
//public class JwtService {
//
//	@Value("${secret_key}")
//	private String SECRET_KEY;
//
//	public String extractUsername(String jwt) {
//		return extractClaim(jwt, Claims::getSubject);
//	}
//
//	public <T> T extractClaim(String jwt, Function<Claims, T> claimsResolver) {
//		final Claims claims = extractAllClaims(jwt);
//		return claimsResolver.apply(claims);
//	}
//
//	public String generateToken(UserDetails userDetail) {
//		return Jwts
//				.builder()
//				.setSubject(userDetail.getUsername())
//				.setIssuedAt(new Date(System.currentTimeMillis()))
//				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) //1h
//				.signWith(getSignKey(), SignatureAlgorithm.HS256)
//				.compact();
//	}
//
//	private Boolean isTokenValid(String jwt, UserDetails userDetails) {
//		final String userName = extractUsername(jwt);
//		return userDetails.equals(userDetails.getUsername()) && !isTokenExpired(jwt);
//	}
//
//	private Boolean isTokenExpired(String jwt) {
//		return extractExpiration(jwt).before(new Date());
//	}
//
//	private Date extractExpiration(String jwt) {
//		return extractClaim(jwt, Claims::getExpiration);
//	}
//
//	private Claims extractAllClaims(String jwt) {
//		return Jwts
//				.parserBuilder()
//				.setSigningKey(getSignKey())
//				.build()
//				.parseClaimsJws(jwt)
//				.getBody();
//	}
//
//	public Long getExpiration(String jwt) {
//		Long now = new Date().getTime();
//		return (extractExpiration(jwt).getTime() - now);
//	}
//
//	private Key getSignKey() {
//		byte[] key = Decoders.BASE64.decode(SECRET_KEY);
//		return Keys.hmacShaKeyFor(key);
//	}
//}
